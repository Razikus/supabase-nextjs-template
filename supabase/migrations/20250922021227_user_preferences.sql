-- Create user_preferences table for storing theme and other user preferences
create table "public"."user_preferences" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "color_theme" text not null default 'sass3',
    "mode_theme" text not null default 'system',
    "enable_system_detection" boolean not null default true,
    "enable_transitions" boolean not null default true,
    "sync_across_devices" boolean not null default false,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);

-- Set owner
alter table "public"."user_preferences" owner to "postgres";

-- Enable row level security
alter table "public"."user_preferences" enable row level security;

-- Create primary key
CREATE UNIQUE INDEX user_preferences_pkey ON public.user_preferences USING btree (id);
alter table "public"."user_preferences" add constraint "user_preferences_pkey" PRIMARY KEY using index "user_preferences_pkey";

-- Create unique index on user_id
CREATE UNIQUE INDEX user_preferences_user_id_key ON public.user_preferences USING btree (user_id);
alter table "public"."user_preferences" add constraint "user_preferences_user_id_key" UNIQUE using index "user_preferences_user_id_key";

-- Create foreign key to auth.users
alter table "public"."user_preferences" add constraint "user_preferences_user_id_fkey"
    FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;
alter table "public"."user_preferences" validate constraint "user_preferences_user_id_fkey";

-- Create function to update updated_at timestamp
create or replace function public.update_updated_at_column()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql security definer;

-- Create trigger to auto-update updated_at
create trigger update_user_preferences_updated_at
    before update on public.user_preferences
    for each row
    execute function public.update_updated_at_column();

-- Add check constraints for valid theme values
alter table "public"."user_preferences"
    add constraint "valid_color_theme"
    check (color_theme in ('sass', 'sass2', 'sass3', 'blue', 'purple', 'green'));

alter table "public"."user_preferences"
    add constraint "valid_mode_theme"
    check (mode_theme in ('light', 'dark', 'system'));

-- Row Level Security Policies
-- Users can view their own preferences
create policy "Users can view own preferences"
on "public"."user_preferences"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));

-- Users can insert their own preferences
create policy "Users can insert own preferences"
on "public"."user_preferences"
as permissive
for insert
to authenticated
with check ((auth.uid() = user_id));

-- Users can update their own preferences
create policy "Users can update own preferences"
on "public"."user_preferences"
as permissive
for update
to authenticated
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));

-- Users can delete their own preferences
create policy "Users can delete own preferences"
on "public"."user_preferences"
as permissive
for delete
to authenticated
using ((auth.uid() = user_id));

-- Grant permissions
grant usage on schema public to postgres, anon, authenticated, service_role;
grant all on table public.user_preferences to postgres, service_role;
grant select, insert, update, delete on table public.user_preferences to authenticated;
grant select on table public.user_preferences to anon;
grant usage, select on sequence public.user_preferences_id_seq to authenticated;